package pearl.ch.services.config.db.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import pearl.ch.services.config.constants.DatabasePropertiesValues;

/**
 * @author Thijssen.ivanne
 */

public class Postgres {

	private String url, user, pw;
	private Connection con;
	private PreparedStatement pst;
	private ResultSet rs;
	private Statement st;
	private int rv;

	public Postgres(String url, String user, String pw) {
		super();
		this.url = url;
		this.user = user;
		this.pw = pw;
	}

	public static Postgres dbch1 = new Postgres(DatabasePropertiesValues.urlDbch1,
			DatabasePropertiesValues.usernameDbch1, DatabasePropertiesValues.passwordDbch1);

	/**
	 * open the connection which then has to be closed with closeConnection()
	 */
	public Connection openConnection() {
		try {
			Class.forName("org.postgresql.Driver");
		} catch (ClassNotFoundException e) {
		}
		try {
			con = DriverManager.getConnection(url, user, pw);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return con;
	}

	public Postgres() {
		super();
	}

	/**
	 * result set of a query which does not alter the database
	 * 
	 * @param query: postgreSQL SELECT statement (no INSERT or UPDATE statement)
	 * @return ResultSet object generated by the query
	 * @throws SQLException
	 */
	public ResultSet executeQuery(String query) {
		try {
			pst = con.prepareStatement(query, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
			rs = pst.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
		}
		return rs;
	}

	/**
	 * return value of a query which alters the database, e.g. INSERT or UPDATE
	 * statement
	 * 
	 * @param statement: postgreSQL STATEMENT altering the database (no SELECT
	 *                   statement)
	 * @return Integer value denoting the number of rows affected by the query
	 */
	public int executeUpdate(String statement) {
		try {
			st = con.createStatement();
			rv = st.executeUpdate(statement);
		} catch (SQLException e) {
			e.printStackTrace();
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
		}
		return rv;
	}

	/**
	 * close the connection which previously had to be opened with openConnection()
	 */
	public void closeConnection() {
		try {
			con.close();
		} catch (SQLException e) {
			e.printStackTrace();
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
		}
	}

}
